---
import authorsData from '@/data/authors.json'
import Layout from '@/layouts/blog.layout.astro'
import Author from '@/views/Author/index.astro'

let allPosts = await Astro.glob('../../../posts/*.md')
allPosts.sort(
  (a, b) =>
    new Date(b.frontmatter.date).valueOf() -
    new Date(a.frontmatter.date).valueOf(),
)

export async function getStaticPaths({ paginate }) {
  let allPosts = await Astro.glob('../../../posts/*.md')
  allPosts = allPosts.sort(
    (a, b) =>
      new Date(b.frontmatter.date).valueOf() -
      new Date(a.frontmatter.date).valueOf(),
  )

  const allAuthers = new Set()

  allPosts.forEach((post) => {
    allAuthers.add(post.frontmatter.author)
  })

  return Array.from(allAuthers).map((author) => {
    const filteredPosts = allPosts.filter(
      (post) =>
        post.frontmatter.author && post.frontmatter.author.includes(author),
    )
    return paginate(filteredPosts, {
      params: { author },
      pageSize: 4,
    })
  })
}

const { page } = Astro.props
const { author } = Astro.params
const title = `${authorsData[author].name}`

const featuredPost = allPosts.filter((post) => post.frontmatter.featured)

const categories = allPosts.reduce((acc, post) => {
  if (post.frontmatter.categories) {
    post.frontmatter.categories.forEach((category) => {
      if (!acc.includes(category)) {
        acc.push(category)
      }
    })
  }
  return acc
}, [])

const recentPosts = allPosts.slice(0, 3)
---

<Layout
  lang="en"
  title={` Author: ${title} | Blog | Mohammad Abu Mattar`}
  description="Personal website, to show my software engineering skills at web development."
>
  <Author
    title={title}
    slug={author}
    allPosts={allPosts}
    page={page}
    author={authorsData[author]}
    featuredPost={featuredPost}
    categories={categories}
    recentPosts={recentPosts}
  />
</Layout>
